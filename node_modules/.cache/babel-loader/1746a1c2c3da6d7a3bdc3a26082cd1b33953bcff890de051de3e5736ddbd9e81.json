{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\2024_1_Web7\\\\src\\\\pages\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getPlaces } from \"../api\";\nimport dog from \"../img/dog.jpg\";\nimport \"./MainPage.css\";\nimport PlaceList from \"../components/PlaceList\";\nimport { Container as MapDiv } from \"react-naver-maps\";\nimport Map from \"../components/Map\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [loadingError, setLoadingError] = useState(null);\n\n  // const handleLoad = async () => {\n  //   // let result;\n  //   try {\n  //     // setLoadingError(null);\n  //     // setIsLoading(true);\n  //     const result = await getPlaces();\n  //     setItems(result);\n  //   } catch (error) {\n  //     // setLoadingError(error);\n  //     console.log(\"오류 발생\");\n  //   }\n  //   // finally {\n  //   //   setIsLoading(false);\n  //   // }\n  // };\n\n  const fetchPlaces = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}api/map/naver/guest/place/all`);\n      if (!response.ok) {\n        throw new Error(\"장소를 불러오는 데 실패했습니다. api 반응 X\");\n      }\n      const data = await response.json();\n      setItems(data);\n    } catch (error) {\n      console.error(\"장소를 불러오는 데 실패했습니다.\", error);\n    }\n  };\n  const handleSearchSubmit = e => {\n    e.preventDefault();\n    // setSearch(e.target[\"search\"].value);\n    const searchTerm = e.target.elements.search.value;\n    setSearch(searchTerm);\n  };\n  useEffect(() => {\n    fetchPlaces();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-box\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"bg-img\",\n        src: dog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearchSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uAC80\\uC0C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlaceList, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MainPage, \"o//etK5j5LFRE3IE0SuRJVNgnkA=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useState","useEffect","getPlaces","dog","PlaceList","Container","MapDiv","Map","jsxDEV","_jsxDEV","Fragment","_Fragment","MainPage","_s","items","setItems","search","setSearch","fetchPlaces","response","fetch","process","env","REACT_APP_API_URL","ok","Error","data","json","error","console","handleSearchSubmit","e","preventDefault","searchTerm","target","elements","value","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","type","_c","$RefreshReg$"],"sources":["C:/GitHub/2024_1_Web7/src/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getPlaces } from \"../api\";\nimport dog from \"../img/dog.jpg\";\nimport \"./MainPage.css\";\nimport PlaceList from \"../components/PlaceList\";\nimport { Container as MapDiv } from \"react-naver-maps\";\nimport Map from \"../components/Map\";\n\nfunction MainPage() {\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [loadingError, setLoadingError] = useState(null);\n\n  // const handleLoad = async () => {\n  //   // let result;\n  //   try {\n  //     // setLoadingError(null);\n  //     // setIsLoading(true);\n  //     const result = await getPlaces();\n  //     setItems(result);\n  //   } catch (error) {\n  //     // setLoadingError(error);\n  //     console.log(\"오류 발생\");\n  //   }\n  //   // finally {\n  //   //   setIsLoading(false);\n  //   // }\n  // };\n\n  const fetchPlaces = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}api/map/naver/guest/place/all`\n      );\n      if (!response.ok) {\n        throw new Error(\"장소를 불러오는 데 실패했습니다. api 반응 X\");\n      }\n      const data = await response.json();\n      setItems(data);\n    } catch (error) {\n      console.error(\"장소를 불러오는 데 실패했습니다.\", error);\n    }\n  };\n\n  const handleSearchSubmit = (e) => {\n    e.preventDefault();\n    // setSearch(e.target[\"search\"].value);\n    const searchTerm = e.target.elements.search.value;\n    setSearch(searchTerm);\n  };\n\n  useEffect(() => {\n    fetchPlaces();\n  }, []);\n\n  return (\n    <>\n      {/* <MapDiv\n        style={{\n          width: \"100%\",\n          height: \"600px\",\n        }}\n      >\n        <Map />\n      </MapDiv> */}\n      <div className=\"bg-box\">\n        <img className=\"bg-img\" src={dog} />\n      </div>\n      <form onSubmit={handleSearchSubmit}>\n        <input name=\"search\" />\n        <button type=\"submit\">검색</button>\n      </form>\n      <PlaceList items={items} />\n    </>\n  );\n}\n\nexport default MainPage;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAOC,GAAG,MAAM,gBAAgB;AAChC,OAAO,gBAAgB;AACvB,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,SAAS,IAAIC,MAAM,QAAQ,kBAAkB;AACtD,OAAOC,GAAG,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,+BACnC,CAAC;MACD,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCZ,QAAQ,CAACW,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;EAED,MAAME,kBAAkB,GAAIC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACA,MAAMC,UAAU,GAAGF,CAAC,CAACG,MAAM,CAACC,QAAQ,CAACnB,MAAM,CAACoB,KAAK;IACjDnB,SAAS,CAACgB,UAAU,CAAC;EACvB,CAAC;EAEDhC,SAAS,CAAC,MAAM;IACdiB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBASE5B,OAAA;MAAK6B,SAAS,EAAC,QAAQ;MAAAD,QAAA,eACrB5B,OAAA;QAAK6B,SAAS,EAAC,QAAQ;QAACC,GAAG,EAAEpC;MAAI;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACNlC,OAAA;MAAMmC,QAAQ,EAAEd,kBAAmB;MAAAO,QAAA,gBACjC5B,OAAA;QAAOoC,IAAI,EAAC;MAAQ;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvBlC,OAAA;QAAQqC,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACPlC,OAAA,CAACL,SAAS;MAACU,KAAK,EAAEA;IAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC3B,CAAC;AAEP;AAAC9B,EAAA,CApEQD,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAsEjB,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}