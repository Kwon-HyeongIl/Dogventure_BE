{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\2024_1_Web7\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport useGeolocation from \"../hooks/useGeolocation\";\nimport placeData from \"../place.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  const mapRef = useRef(null);\n  const {\n    naver\n  } = window;\n  const {\n    currentMyLocation\n  } = useGeolocation();\n  const {\n    LatLng,\n    Map,\n    Marker,\n    InfoWindow\n  } = naver.maps; // 필요한 객체를 비구조화 할당\n  const [places, setPlaces] = useState([]);\n  useEffect(() => {\n    if (currentMyLocation.lat !== 0 && currentMyLocation.lng !== 0) {\n      // 네이버 지도 옵션 선택\n\n      // 백엔드 장소 GET 코드\n      const fetchLocation = async () => {\n        try {\n          const response = await fetch(`${process.env.REACT_APP_API_URL}api/map/naver/place/all`);\n          if (!response.ok) {\n            throw new Error(\"장소를 불러오는 데 실패했습니다.\");\n          }\n          const data = await response.json();\n          setPlaces(data);\n        } catch (error) {\n          console.error(\"장소를 불러오는 데 실패했습니다.\", error);\n        }\n      };\n      fetchLocation();\n      const mapOptions = {\n        // 지도의 초기 중심 좌표\n        // 사용자의 현재 위치를 가져오는 건 https 환경에서만 작동\n        center: new LatLng(currentMyLocation.lat, currentMyLocation.lng),\n        logoControl: false,\n        // 네이버 로고 표시 X\n        mapDataControl: false,\n        // 지도 데이터 저작권 컨트롤 표시 X\n        scaleControl: true,\n        // 지도 축적 컨트롤의 표시 여부\n        tileControl: 200,\n        // 지도 타일을 전환할 때 페이드 인 효과의 지속 시간(밀리초)\n        zoom: 15,\n        //지도의 초기 줌 레벨\n        zoomControl: true,\n        // 줌 컨트롤 표시\n        zoomContorlOptions: {\n          position: 9\n        } // 줌 컨트롤 우하단에 배치\n      };\n      mapRef.current = new Map(\"map\", mapOptions);\n\n      // 현재 내 위치에 마커 표시\n      const myLocationMarker = new Marker({\n        // 생성될 마커의 위치\n        position: LatLng(currentMyLocation.lat, currentMyLocation.lng),\n        // 마커를 표시할 Map 객체\n        map: mapRef.current\n      });\n      const infoWindow = new InfoWindow({\n        content: ['<div style=\"padding: 10px; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 16px 0px;\">', `   <div style=\"font-weight: bold; margin-bottom: 5px;\">부경대학교</div>`, `   <div style=\"font-size: 13px;\">부경대학교다.<div>`, \"</div>\"].join(\"\"),\n        maxWidth: 300,\n        anchorSize: {\n          width: 12,\n          height: 14\n        },\n        borderColor: \"#cecdc7\"\n      });\n      naver.maps.Event.addListener(myLocationMarker, \"click\", () => {\n        if (infoWindow.getMap()) {\n          // 정보창이 닫힐 때 이벤트 발생\n          infoWindow.close();\n          // 추가해야 하는 코드\n          // -> 정보창이 켜진 후 다른 곳 아무데나 눌러도 닫히도록\n        } else if (mapRef.current !== null) {\n          // 정보창이 열릴 때 이벤트 발생\n          infoWindow.open(mapRef.current, myLocationMarker);\n        }\n      });\n    }\n  }, [currentMyLocation]);\n\n  // 장소 정보 api 받아와서 마커 표시 및 정보창 띄우는 코드\n  useEffect(() => {\n    places.forEach(place => {\n      // placeData를 나중에 places로 변경하기\n      const placeMarker = new Marker({\n        key: place.id,\n        title: place.name,\n        position: new LatLng(place.x, place.y),\n        map: mapRef.current\n      });\n\n      // 정보창 사이드에서 뜨도록 css 수정 필요\n      const placeInfoWindow = new InfoWindow({\n        content: `<div style=\"padding: 10px; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 16px 0px;\">\n            <div style=\"font-weight: bold; margin-bottom: 5px;\">${place.name}</div>\n            <div style=\"font-size: 13px;\">${place.detailContent}</div>\n            <div>${place.image}</div>\n          </div>`,\n        maxWidth: 300,\n        anchorSize: {\n          width: 12,\n          height: 14\n        },\n        borderColor: \"#cecdc7\"\n      });\n      naver.maps.Event.addListener(placeMarker, \"click\", () => {\n        if (placeInfoWindow.getMap()) {\n          placeInfoWindow.close();\n        } else {\n          placeInfoWindow.open(mapRef.current, placeMarker);\n        }\n      });\n    });\n  }, [places, currentMyLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: \"100%\",\n      height: \"400px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n}\n_s(Map, \"0zC8Z3MyWX1UyhvIedi3Uryg8mY=\", false, function () {\n  return [useGeolocation];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useEffect","useRef","useState","useGeolocation","placeData","jsxDEV","_jsxDEV","Map","_s","mapRef","naver","window","currentMyLocation","LatLng","Marker","InfoWindow","maps","places","setPlaces","lat","lng","fetchLocation","response","fetch","process","env","REACT_APP_API_URL","ok","Error","data","json","error","console","mapOptions","center","logoControl","mapDataControl","scaleControl","tileControl","zoom","zoomControl","zoomContorlOptions","position","current","myLocationMarker","map","infoWindow","content","join","maxWidth","anchorSize","width","height","borderColor","Event","addListener","getMap","close","open","forEach","place","placeMarker","key","id","title","name","x","y","placeInfoWindow","detailContent","image","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/GitHub/2024_1_Web7/src/components/Map.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport useGeolocation from \"../hooks/useGeolocation\";\nimport placeData from \"../place.json\";\n\nfunction Map() {\n  const mapRef = useRef(null);\n  const { naver } = window;\n  const { currentMyLocation } = useGeolocation();\n  const { LatLng, Map, Marker, InfoWindow } = naver.maps; // 필요한 객체를 비구조화 할당\n  const [places, setPlaces] = useState([]);\n\n  useEffect(() => {\n    if (currentMyLocation.lat !== 0 && currentMyLocation.lng !== 0) {\n      // 네이버 지도 옵션 선택\n\n      // 백엔드 장소 GET 코드\n      const fetchLocation = async () => {\n        try {\n          const response = await fetch(\n            `${process.env.REACT_APP_API_URL}api/map/naver/place/all`\n          );\n          if (!response.ok) {\n            throw new Error(\"장소를 불러오는 데 실패했습니다.\");\n          }\n          const data = await response.json();\n          setPlaces(data);\n        } catch (error) {\n          console.error(\"장소를 불러오는 데 실패했습니다.\", error);\n        }\n      };\n\n      fetchLocation();\n\n      const mapOptions = {\n        // 지도의 초기 중심 좌표\n        // 사용자의 현재 위치를 가져오는 건 https 환경에서만 작동\n        center: new LatLng(currentMyLocation.lat, currentMyLocation.lng),\n        logoControl: false, // 네이버 로고 표시 X\n        mapDataControl: false, // 지도 데이터 저작권 컨트롤 표시 X\n        scaleControl: true, // 지도 축적 컨트롤의 표시 여부\n        tileControl: 200, // 지도 타일을 전환할 때 페이드 인 효과의 지속 시간(밀리초)\n        zoom: 15, //지도의 초기 줌 레벨\n        zoomControl: true, // 줌 컨트롤 표시\n        zoomContorlOptions: { position: 9 }, // 줌 컨트롤 우하단에 배치\n      };\n      mapRef.current = new Map(\"map\", mapOptions);\n\n      // 현재 내 위치에 마커 표시\n      const myLocationMarker = new Marker({\n        // 생성될 마커의 위치\n        position: LatLng(currentMyLocation.lat, currentMyLocation.lng),\n        // 마커를 표시할 Map 객체\n        map: mapRef.current,\n      });\n\n      const infoWindow = new InfoWindow({\n        content: [\n          '<div style=\"padding: 10px; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 16px 0px;\">',\n          `   <div style=\"font-weight: bold; margin-bottom: 5px;\">부경대학교</div>`,\n          `   <div style=\"font-size: 13px;\">부경대학교다.<div>`,\n          \"</div>\",\n        ].join(\"\"),\n        maxWidth: 300,\n        anchorSize: {\n          width: 12,\n          height: 14,\n        },\n        borderColor: \"#cecdc7\",\n      });\n\n      naver.maps.Event.addListener(myLocationMarker, \"click\", () => {\n        if (infoWindow.getMap()) {\n          // 정보창이 닫힐 때 이벤트 발생\n          infoWindow.close();\n          // 추가해야 하는 코드\n          // -> 정보창이 켜진 후 다른 곳 아무데나 눌러도 닫히도록\n        } else if (mapRef.current !== null) {\n          // 정보창이 열릴 때 이벤트 발생\n          infoWindow.open(mapRef.current, myLocationMarker);\n        }\n      });\n    }\n  }, [currentMyLocation]);\n\n  // 장소 정보 api 받아와서 마커 표시 및 정보창 띄우는 코드\n  useEffect(() => {\n    places.forEach((place) => {\n      // placeData를 나중에 places로 변경하기\n      const placeMarker = new Marker({\n        key: place.id,\n        title: place.name,\n        position: new LatLng(place.x, place.y),\n        map: mapRef.current,\n      });\n\n      // 정보창 사이드에서 뜨도록 css 수정 필요\n      const placeInfoWindow = new InfoWindow({\n        content: `<div style=\"padding: 10px; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 16px 0px;\">\n            <div style=\"font-weight: bold; margin-bottom: 5px;\">${place.name}</div>\n            <div style=\"font-size: 13px;\">${place.detailContent}</div>\n            <div>${place.image}</div>\n          </div>`,\n        maxWidth: 300,\n        anchorSize: { width: 12, height: 14 },\n        borderColor: \"#cecdc7\",\n      });\n\n      naver.maps.Event.addListener(placeMarker, \"click\", () => {\n        if (placeInfoWindow.getMap()) {\n          placeInfoWindow.close();\n        } else {\n          placeInfoWindow.open(mapRef.current, placeMarker);\n        }\n      });\n    });\n  }, [places, currentMyLocation]);\n\n  return <div id=\"map\" style={{ width: \"100%\", height: \"400px\" }} />;\n}\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}